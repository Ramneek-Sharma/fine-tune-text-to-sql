# -*- coding: utf-8 -*-
"""text_sql.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YlH8TwGxT5yL7glxz8aYzzbz_47R_liy
"""

!pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl triton cut_cross_entropy unsloth_zoo
!pip install sentencepiece protobuf datasets huggingface_hub hf_transfer
!pip install --no-deps unsloth

from unsloth import FastLanguageModel
import torch
max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

# 4bit pre quantized models we support for 4x faster downloading + no OOMs.
fourbit_models = [
    "unsloth/Meta-Llama-3.1-8B-bnb-4bit",      # Llama-3.1 15 trillion tokens model 2x faster!
    "unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit",
    "unsloth/Meta-Llama-3.1-70B-bnb-4bit",
    "unsloth/Meta-Llama-3.1-405B-bnb-4bit",    # We also uploaded 4bit for 405b!
    "unsloth/Mistral-Nemo-Base-2407-bnb-4bit", # New Mistral 12b 2x faster!
    "unsloth/Mistral-Nemo-Instruct-2407-bnb-4bit",
    "unsloth/mistral-7b-v0.3-bnb-4bit",        # Mistral v3 2x faster!
    "unsloth/mistral-7b-instruct-v0.3-bnb-4bit",
    "unsloth/Phi-3.5-mini-instruct",           # Phi-3.5 2x faster!
    "unsloth/Phi-3-medium-4k-instruct",
    "unsloth/gemma-2-9b-bnb-4bit",
    "unsloth/gemma-2-27b-bnb-4bit",            # Gemma 2x faster!
] # More models at https://huggingface.co/unsloth

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Meta-Llama-3.1-8B",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

untrained_model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Meta-Llama-3.1-8B",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

alpaca_prompt = """Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
company database:
{}

### Input:
sql prompt:
{}

### Response:
sql:
{}
"""

EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN
def formatting_prompts_func(examples):
    company_database = examples["sql_context"]
    prompts       = examples["sql_prompt"]
    sqls      = examples["sql"]
    # explanation = examples["sql_explanation"]
    texts=[]
    for company_database, prompts,sqls in zip(company_database, prompts,sqls):
        # Must add EOS_TOKEN, otherwise your generation will go on forever!
        text = alpaca_prompt.format(company_database, prompts,sqls) + EOS_TOKEN
        texts.append(text)
    return { "text" : texts, }
pass

from datasets import load_dataset
dataset = load_dataset("gretelai/synthetic_text_to_sql", split = "train")
dataset = dataset.map(formatting_prompts_func, batched = True,)

dataset['text'][1]

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False,  # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1,  # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",  # Use this for WandB etc
    ),
)

# @title Show current memory stats
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

trainer_stats = trainer.train()

alpaca_prompt_sql_only = """Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
company database: {}

### Input:
sql prompt: {}

### Response:
sql: {}

"""


from unsloth import FastLanguageModel

# Enable faster inference
FastLanguageModel.for_inference(model)

# ðŸ‘‡ Replace these with ANY new test case
company_database = """CREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT);
INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South');
CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE);
INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'),
(2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');"""

sql_prompt = "What is the total volume of timber sold by each salesperson, sorted by salesperson?"


# Format the input with empty SQL and explanation slots for generation
input_prompt = alpaca_prompt.format(company_database, sql_prompt, "", "")

# Tokenize and move to CUDA
inputs = tokenizer([input_prompt], return_tensors="pt").to("cuda")

# Generate output
outputs = model.generate(
    **inputs,
    max_new_tokens=64,
    use_cache=True,
    do_sample=False,
    temperature=0.7,
)

# Decode and print
generated_text = tokenizer.batch_decode(outputs, skip_special_tokens=True)[0]
print(generated_text)

explanation_prompt = """Below is an instruction that describes a task. Given a SQL query and a company database schema, explain what the query is doing.

### Instruction:
company database:
{}

### SQL Query:
sql:{}

### Response:
explanation:{}"""
EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN
def formatting_prompts_func(examples):
    company_database = examples["sql_context"]
    sqls       = examples["sql"]
    explanation = examples["sql_explanation"]
    texts=[]
    for company_database, sqls,explanation in zip(company_database, sqls,explanation):
        # Must add EOS_TOKEN, otherwise your generation will go on forever!
        text = alpaca_prompt.format(company_database, sqls,explanation) + EOS_TOKEN
        texts.append(text)
    return { "text" : texts, }
pass

from datasets import load_dataset
dataset1 = load_dataset("gretelai/synthetic_text_to_sql", split = "train")
dataset1 = dataset.map(formatting_prompts_func, batched = True,)

dataset1['text'][1]

untrained_model = FastLanguageModel.get_peft_model(
    untrained_model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = untrained_model,
    tokenizer = tokenizer,
    train_dataset = dataset1,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False,  # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1,  # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",  # Use this for WandB etc
    ),
)

trainer_stats = trainer.train()

def generate_sql_and_explanation(company_database, sql_prompt):
    sql_input_prompt = alpaca_prompt.format(company_database, sql_prompt, "", "")
    sql_tokens = tokenizer([sql_input_prompt], return_tensors="pt").to("cuda")
    sql_output = model.generate(**sql_tokens, max_new_tokens=64)
    sql_text = tokenizer.batch_decode(sql_output, skip_special_tokens=True)[0]
    extracted_sql = extract_sql_from_response(sql_text)

    explanation_input = explanation_prompt.format(company_database, extracted_sql, "")
    exp_tokens = tokenizer([explanation_input], return_tensors="pt").to("cuda")
    explanation_output = untrained_model.generate(**exp_tokens, max_new_tokens=100)
    explanation_text = tokenizer.batch_decode(explanation_output, skip_special_tokens=True)[0]

    return sql_text, explanation_text

FastLanguageModel.for_inference(untrained_model)

company_database = """
CREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT);
INSERT INTO salesperson (salesperson_id, name, region) VALUES
(1, 'John Doe', 'North'), (2, 'Jane Smith', 'South');
CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE);
INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES
(1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');
"""

sql_prompt = "What is the total volume of timber sold by each salesperson, sorted by salesperson?"

# Call the function
sql_query, explanation = generate_sql_and_explanation(company_database, sql_prompt)

print("SQL Query:\n", sql_query)
print("\nExplanation:\n", explanation)

import re

def extract_sql_from_response(response_text):
    match = re.search(r"sql:\s*(SELECT.*?);?$", response_text, re.IGNORECASE | re.DOTALL)
    if match:
        return match.group(1).strip()
    else:
        # fallback if no "sql:" is found â€” just return the whole response
        return response_text.strip()

from transformers import AutoTokenizer
from peft import PeftModel
import os

# Set your paths
sql_save_path = "/content/saved_models/sql_model"
exp_save_path = "/content/saved_models/explanation_model"

# Create folders if not exist
os.makedirs(sql_save_path, exist_ok=True)
os.makedirs(exp_save_path, exist_ok=True)

# âœ… Save SQL Model
# If you used PEFT (e.g. Unsloth), use .save_pretrained on PeftModel
model.save_pretrained(sql_save_path)
tokenizer.save_pretrained(sql_save_path)  # Assuming both models use the same tokenizer

# âœ… Save Explanation Model
untrained_model.save_pretrained(exp_save_path)
# No need to save tokenizer again if same

print("âœ… Models saved successfully.")

import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM
from peft import PeftModel, PeftConfig
import torch

# Load tokenizer (from sql model)
tokenizer = AutoTokenizer.from_pretrained("saved_models/sql_model")

# Load base model (same as what you used for fine-tuning, e.g., Llama-3 8B, Mistral etc.)
base_model_id = "unsloth/llama-3-8b-bnb-4bit"  # or whatever base model you used
base_model = AutoModelForCausalLM.from_pretrained(base_model_id, device_map="auto", torch_dtype=torch.float16)

# Load adapters
sql_model = PeftModel.from_pretrained(base_model, "saved_models/sql_model")
explanation_model = PeftModel.from_pretrained(base_model, "saved_models/explanation_model")

# Prompts
alpaca_prompt = """### Company Database:\n{0}\n### Question:\n{1}\n### SQL:\n{2}\n### Explanation:\n{3}"""
explanation_prompt = """### Company Database:\n{0}\n### SQL:\n{1}\n### Explanation:\n{2}"""

def extract_sql_from_response(text):
    # A basic way to extract SQL line (adjust if needed)
    for line in text.splitlines():
        if "SELECT" in line.upper():
            return line.strip()
    return text.strip()

def generate_sql_and_explanation(company_database, sql_prompt):
    # Step 1: Generate SQL
    sql_input_prompt = alpaca_prompt.format(company_database, sql_prompt, "", "")
    sql_tokens = tokenizer([sql_input_prompt], return_tensors="pt").to("cuda")
    sql_output = sql_model.generate(**sql_tokens, max_new_tokens=64)
    sql_text = tokenizer.batch_decode(sql_output, skip_special_tokens=True)[0]
    extracted_sql = extract_sql_from_response(sql_text)

    # Step 2: Generate Explanation
    explanation_input = explanation_prompt.format(company_database, extracted_sql, "")
    exp_tokens = tokenizer([explanation_input], return_tensors="pt").to("cuda")
    explanation_output = explanation_model.generate(**exp_tokens, max_new_tokens=100)
    explanation_text = tokenizer.batch_decode(explanation_output, skip_special_tokens=True)[0]

    return extracted_sql, explanation_text

# Gradio UI
iface = gr.Interface(
    fn=generate_sql_and_explanation,
    inputs=[
        gr.Textbox(label="Company Database", lines=10, placeholder="Paste SQL schema here..."),
        gr.Textbox(label="SQL Prompt", placeholder="e.g., What is the total volume sold by each salesperson?")
    ],
    outputs=[
        gr.Textbox(label="Generated SQL"),
        gr.Textbox(label="Explanation")
    ],
    title="SQL + Explanation Generator"
)

iface.launch()

pip install transformers peft gradio accelerate

